// Copyright � 2025-Present The DClare Authors
//
// Licensed under the Apache License, Version 2.0 (the "License"),
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace DClare.Sdk.Models;

/// <summary>
/// Represents the definition of the authentication method used to secure access to an exposed interface
/// </summary>
[DataContract]
public record SecuritySchemeDefinition
{

    /// <summary>
    /// Gets/sets an object used to configure an hosted agent
    /// </summary>
    [Required, AllowedValues(SecurityScheme.ApiKey, SecurityScheme.Http, SecurityScheme.MutualTls, SecurityScheme.OAuth2, SecurityScheme.OpenIdConnect)]
    [DataMember(Name = "type", Order = 1), JsonPropertyName("type"), JsonPropertyOrder(1), YamlMember(Alias = "type", Order = 1)]
    public virtual string Type { get; set; } = null!;

    /// <summary>
    /// Gets/sets a short description for security scheme. CommonMark syntax MAY be used for rich text representation
    /// </summary>
    [DataMember(Name = "description", Order = 2), JsonPropertyName("description"), JsonPropertyOrder(2), YamlMember(Alias = "description", Order = 2)]
    public virtual string? Description { get; set; }

    /// <summary>
    /// Gets/sets the name of the header, query or cookie parameter to be used<para></para>
    /// Required if `type` is set to `apiKey`
    /// </summary>
    [DataMember(Name = "name", Order = 3), JsonPropertyName("name"), JsonPropertyOrder(3), YamlMember(Alias = "name", Order = 3)]
    public virtual string? Name { get; set; }

    /// <summary>
    /// Gets/sets the location of the API key<para></para>
    /// Required if `type` is set to `apiKey`
    /// </summary>
    [AllowedValues(AuthenticationParameterPlacementLocation.Cookie, AuthenticationParameterPlacementLocation.Header, AuthenticationParameterPlacementLocation.Query)]
    [DataMember(Name = "in", Order = 4), JsonPropertyName("in"), JsonPropertyOrder(4), YamlMember(Alias = "in", Order = 4)]
    public virtual string? In { get; set; }

    /// <summary>
    /// Gets/sets the name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235<para></para>
    /// Required if `type` is set to `http`
    /// </summary>
    [DataMember(Name = "scheme", Order = 5), JsonPropertyName("scheme"), JsonPropertyOrder(5), YamlMember(Alias = "scheme", Order = 5)]
    public virtual string? Scheme { get; set; }

    /// <summary>
    /// Gets/sets an hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an authorization server, so this information is primarily for documentation purposes<para></para>
    /// Applies if `type` is set to `http`, otherwise ignored
    /// </summary>
    [DataMember(Name = "bearerFormat", Order = 6), JsonPropertyName("bearerFormat"), JsonPropertyOrder(6), YamlMember(Alias = "bearerFormat", Order = 6)]
    public virtual string? BearerFormat { get; set; }

    /// <summary>
    /// Gets/sets an object containing configuration information for the flow types supported<para></para>
    /// Required if `type` is set to `oauth2`
    /// </summary>
    [DataMember(Name = "flows", Order = 7), JsonPropertyName("flows"), JsonPropertyOrder(7), YamlMember(Alias = "flows", Order = 7)]
    public virtual OauthFlowCollectionDefinition? Flows { get; set; }

    /// <summary>
    /// Gets/sets the OpenId Connect URL to discover OAuth2 configuration values<para></para>
    /// Required if `type` is set to `openIdConnect`
    /// </summary>
    [DataMember(Name = "openIdConnectUrl", Order = 8), JsonPropertyName("openIdConnectUrl"), JsonPropertyOrder(8), YamlMember(Alias = "openIdConnectUrl", Order = 8)]
    public virtual Uri? OpenIdConnectUrl { get; set; }

}
